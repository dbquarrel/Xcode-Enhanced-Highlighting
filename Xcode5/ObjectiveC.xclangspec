// C-based languages
(  

/****************************************************************************/
// MARK: Strings and Characters
/****************************************************************************/

    {
        Identifier = "xcode.lang.string.objc";
        Syntax = {
            Start = "@\"";
            EscapeChar = "\\";
            End = "\"";
            AltEnd = "\n";
            Type = "xcode.syntax.string";
        };
    },

/****************************************************************************/
// MARK: Objective-C keywords
/****************************************************************************/

/// NOTE:
    // clang overrides identifiers/keywords
    // this is how it sends back information to the text formatting
    // engine so that it can highlight project classes / etc.
    // a side effect of this is that it forces method names to take
    // on default colors, because they are composed of identifiers

    {
        Identifier = "xcode.lang.objc.identifier";
        Syntax = {
            StartChars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_";
//            StartChars = "@abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_";
            Chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_";
            Words = (
                // Keywords from C
                "__alignof",
                "__alignof__",
                "__asm",
                "__asm__",
                "__attribute",
                "__attribute__",
                "__block",
                "__builtin_choose_expr",
                "__builtin_offsetof",
                "__builtin_types_compatible_p",
                "__builtin_va_arg",
                "__complex",
                "__complex__",
                "__const",
                "__const__",
                "__extension__",
                "__imag",
                "__imag__",
                "__label__",
                "__real",
                "__real__",
                "__restrict",
                "__restrict__",
                "__signed",
                "__signed__",
                "__thread",
                "__typeof",
                "__typeof__",
                "__unused",
                "__volatile",
                "__volatile__",
                "__FUNCTION__",
                "__PRETTY_FUNCTION__",
                "_Bool",
                "_Complex",
                "_Decimal32",
                "_Decimal64",
                "_Decimal128",
                "_Imaginary",
                "asm",
                "auto",
                "bool",
                "break",
                "case",
                "char",
                "const",
                "continue",
                "default",
                "do",
                "double",
                "else",
                "enum",
                "extern",
                "false",
                "float",
                "for",
                "goto",
                "if",
                "inline",
                "int",
                "long",
                "register",
                "restrict",
                "return",
                "short",
                "signed",
                "sizeof",
                "static",
                "struct",
                "switch",
                "true",
                "typedef",
                "typeof",
                "union",
                "unsigned",
                "void",
                "volatile",
                "while",
                "FALSE",
                "NULL",
                "TRUE",
                // Keywords from Objective-C
                "_cmd",
                "__autoreleasing",
                "__bridge",
                "__bridge_transfer",
                "__bridge_retained",
                "__strong",
                "__unsafe_unretained",
                "__weak",
		/*
                "@autoreleasepool",
                "@catch",
                "@class",
                "@compatibility_alias",
                "@defs",
                "@dynamic",
                "@encode",
                "@end",
                "@finally",
                "@implementation",
                "@import",
                "@interface",
                "@optional",
                "@package",
                "@private",
                "@property",
                "@protected",
                "@protocol",
                "@public",
                "@required",
                "@selector",
                "@synchronized",
                "@synthesize",
                "@throw",
                "@try",
		*/
                "bycopy",
                "byref",
                "in",
                "inout",
                "oneway",
                "out",
                "BOOL",
                "IBAction",
                "IBOutlet",
                "IBOutletCollection",
                "IMP",
                "NO",
                "NS_DURING",
                "NS_ENDHANDLER",
                "NS_HANDLER",
                "NS_VALUERETURN",
                "NS_VOIDRETURN",
                "Nil",
                "SEL",
                "YES",
                "id",
                "nil",
                "self",
                "super",
                "instancetype",
		);
	    // inhibiting keyword recognition with this
	    // next line will cause a mismatch in the color
	    // lookup, this will inhibit both keywords from
	    // being colored to scheme *and* clang's identifier
	    // recognition which is what plugs into project/global
	    // class names etc. It's desirable to keep both, but
	    // the logic cascade goes like this:
	    //
	    // keyword recognition allows clang to handle ids
	    // clang handling causes all identifiers to be colored to scheme
	    // all identifiers being colored to scheme cannot be overridden
	    // ... and then we lose our formatting because it's all ignored
	    //
	    // For now I am inhibiting keyword coloring here rather than
	    // in the color file, since the color file will work for
	    // all grammars not just ObjC
	    //
            //Type = "xcode.syntax.keyword";
            Type = "xcode.syntax.keyword.custom";
	    // stopping AltType from being recognized
	    // doesn't matter for the highlighting engine
	    // as it will receive indentifer information from
	    // clang, so fiddling with this next line does
	    // nothing
            AltType = "xcode.syntax.identifier";
        };
    },
{ // dbx good idea but doesn't seem to work, maybe clang overriding
        Identifier = "xcode.lang.objc.directive";
        Syntax = {
	    StartChars = "@";
	    Chars = "@abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_";
            Tokenizer = "xcode.lang.objc.lexer";
            Type = "xcode.syntax.directive";
        };
    },
    
{
        Identifier = "xcode.lang.objc.interestingOperators";
        Syntax = {
            Words = (
                "...",
                "->",
                ".",
		);		
            Type = "xcode.syntax.interesting";
        };
    },

/****************************************************************************/
// MARK: Objective-C Top-Level
/****************************************************************************/

    {
        Identifier = "xcode.lang.objc";
        Description = "Objective-C Coloring";
        BasedOn = "xcode.lang.c";
        IncludeInMenu = YES;
        UsesCLikeIndentation = YES;
        Name = "Objective-C";
        Syntax = {
            Tokenizer = "xcode.lang.objc.lexer.toplevel";
            IncludeRules = (
                "xcode.lang.objc.enumblock",
                "xcode.lang.objc.structblock",
                "xcode.lang.objc.unionblock",
                "xcode.lang.objc.block.toplevel",
                "xcode.lang.objc.array.literal",
                "xcode.lang.objc.dictionary.literal",
                "xcode.lang.objc.expression.literal",
                "xcode.lang.objc.bracketexpr",
                "xcode.lang.objc.parenexpr",
                "xcode.lang.objc.interface",
                "xcode.lang.objc.implementation",
                "xcode.lang.objc.protocol.declaration",
                "xcode.lang.objc.protocol",
                "xcode.lang.objc.function.declaration",
                "xcode.lang.objc.function.definition",
                "xcode.lang.objc.property.declaration",
                "xcode.lang.objc.typedef",
                "xcode.lang.objc.initializer",
            );
            Type = "xcode.syntax.plain";
        };
    },

    // toplevel blocks like namespaces and extern "C"
    {
        Identifier = "xcode.lang.objc.block.toplevel";
        BasedOn = "xcode.lang.c.block";     // for text macros
        Syntax = {
            Tokenizer = "xcode.lang.objc.lexer.toplevel";
            Start = "{";
            End = "}";
            Foldable = YES;
            IncludeRules = (
                "xcode.lang.objc.block",
                "xcode.lang.objc.closure",
                "xcode.lang.objc.array.literal",
                "xcode.lang.objc.dictionary.literal",
                "xcode.lang.objc.expression.literal",
                "xcode.lang.objc.bracketexpr",
                "xcode.lang.objc.parenexpr",
                "xcode.lang.objc.interface",
                "xcode.lang.objc.implementation",
                "xcode.lang.objc.protocol.declaration",
                "xcode.lang.objc.protocol",
// should comment out these declarations to make properties show up		
                "xcode.lang.objc.function.declaration",
                "xcode.lang.objc.function.definition",
                "xcode.lang.objc.property.declaration",
                "xcode.lang.objc.typedef",
                "xcode.lang.objc.initializer",
            );
            Type = "xcode.syntax.plain";
        };
    },

    {
        Identifier = "xcode.lang.objc.import";
        Syntax = {
            Tokenizer = "xcode.lang.objc.lexer";
            Rules = (
                "@import",
                "xcode.lang.objc.identifier",
            );
            Type = "xcode.syntax.objc.import";
        };
    },

/****************************************************************************/
// MARK: Lexers
/****************************************************************************/

    // The following rule returns tokens to the other rules
    {
        Identifier = "xcode.lang.objc.lexer";
        Syntax = {
            IncludeRules = (
                "xcode.lang.comment.degenerate",
                "xcode.lang.comment.headerdoc",
                "xcode.lang.comment.headerdoc.star",
                "xcode.lang.comment.headerdoc.singleline.bang",
                "xcode.lang.comment.headerdoc.singleline.slash",
                "xcode.lang.comment",
                "xcode.lang.comment.singleline",
                "xcode.lang.c.preprocessor",
                "xcode.lang.string.objc",
                "xcode.lang.string",
                "xcode.lang.character",
                "xcode.lang.completionplaceholder",
                "xcode.lang.objc.attribute",
                "xcode.lang.objc.identifier",
                "xcode.lang.objc.array.literal.start",
                "xcode.lang.objc.dictionary.literal.start",
                "xcode.lang.objc.expression.literal.start",
                "xcode.lang.number",
                "xcode.lang.objc.keyword_override",
                "xcode.lang.objc.interestingOperators",
                "xcode.lang.objc.directive",
            );
        };
    },
    {
        Identifier = "xcode.lang.objc.literal.lexer";
        Syntax = {
            IncludeRules = (
                "xcode.lang.comment.degenerate",
                "xcode.lang.comment.headerdoc",
                "xcode.lang.comment.headerdoc.star",
                "xcode.lang.comment.headerdoc.singleline.bang",
                "xcode.lang.comment.headerdoc.singleline.slash",
                "xcode.lang.comment",
                "xcode.lang.comment.singleline",
                "xcode.lang.c.preprocessor",
                "xcode.lang.string.objc",
                "xcode.lang.string",
                "xcode.lang.character",
                "xcode.lang.completionplaceholder",
                "xcode.lang.objc.attribute",
                "xcode.lang.objc.identifier",
                "xcode.lang.objc.array.literal.start",
                "xcode.lang.objc.array.literal.end",
                "xcode.lang.objc.dictionary.literal.start",
                "xcode.lang.objc.dictionary.literal.end",
                "xcode.lang.objc.expression.literal.start",
                "xcode.lang.objc.expression.literal.end",
                "xcode.lang.number",
                "xcode.lang.objc.interestingOperators",
                "xcode.lang.objc.directive",
            );
        };
    },
    {
        Identifier = "xcode.lang.objc.lexer.toplevel";
        Syntax = {
            IncludeRules = (
                "xcode.lang.comment.degenerate",
                "xcode.lang.comment.headerdoc",
                "xcode.lang.comment.headerdoc.star",
                "xcode.lang.comment.headerdoc.singleline.bang",
                "xcode.lang.comment.headerdoc.singleline.slash",
                "xcode.lang.comment",
                "xcode.lang.comment.singleline",
                "xcode.lang.c.preprocessor",
                "xcode.lang.string.objc",
                "xcode.lang.string",
                "xcode.lang.character",
                "xcode.lang.completionplaceholder",
                "xcode.lang.objc.interface.declarator",
                "xcode.lang.objc.implementation.declarator",
                "xcode.lang.objc.protocol.declarator",
                "xcode.lang.objc.property.declarator",
                "xcode.lang.objc.attribute",
                "xcode.lang.objc.identifier",
                "xcode.lang.objc.array.literal.start",
                "xcode.lang.objc.dictionary.literal.start",
                "xcode.lang.objc.expression.literal.start",
                "xcode.lang.number",
                "xcode.lang.objc.interestingOperators",
                "xcode.lang.objc.directive",
            );
        };
    },

    {
        Identifier = "xcode.lang.objc.attribute";
        Syntax = {
            Tokenizer = "xcode.lang.objc.lexer.attribute";
            Rules = (
                "__attribute__",
                "xcode.lang.objc.parenexpr.attribute",
            );
            Type = "xcode.syntax.c.attribute";
        };
    },
    {
        Identifier = "xcode.lang.objc.lexer.attribute";
        Syntax = {
            IncludeRules = (
                "xcode.lang.comment.degenerate",
                "xcode.lang.comment.headerdoc",
                "xcode.lang.comment.headerdoc.star",
                "xcode.lang.comment.headerdoc.singleline.bang",
                "xcode.lang.comment.headerdoc.singleline.slash",
                "xcode.lang.comment",
                "xcode.lang.comment.singleline",
                "xcode.lang.c.preprocessor",
                "xcode.lang.string.objc",
                "xcode.lang.string",
                "xcode.lang.character",
                "xcode.lang.completionplaceholder",
                "xcode.lang.objc.identifier",
                "xcode.lang.number",
                "xcode.lang.objc.interestingOperators",
                "xcode.lang.objc.directive",
            );
        };
    },
    {
        Identifier = "xcode.lang.objc.parenexpr.attribute";
        Syntax = {
            Tokenizer = "xcode.lang.objc.lexer.attribute";
            Start = "(";
            End = ")";
            Recursive = YES;
        };
    },
    
    {
        Identifier = "xcode.lang.objc.implementation.declarator";
        Syntax = {
            Tokenizer = "xcode.lang.objc.lexer";
            Rules = (
                "@implementation",
                "xcode.lang.objc.classnameclause",
            );
            Type = "xcode.syntax.name.tree";
        };
    },
    {
        Identifier = "xcode.lang.objc.interface.declarator";
        Syntax = {
            Tokenizer = "xcode.lang.objc.lexer";
            Rules = (
                "@interface",
                "xcode.lang.objc.classnameclause",
                ":?",
                "xcode.lang.objc.classname?",
                "xcode.lang.objc.protocolclause?",
            );
            Type = "xcode.syntax.name.tree";
        };
    },
    {
        Identifier = "xcode.lang.objc.protocol.declarator";
        Syntax = {
            Tokenizer = "xcode.lang.objc.lexer";
            Rules = (
                "@protocol",
                "xcode.lang.objc.protocolname",
            );
            Type = "xcode.syntax.name.tree";
        };
    },
    {
        Identifier = "xcode.lang.objc.classnameclause";
        Syntax = {
            Tokenizer = "xcode.lang.objc.lexer";
            Rules = (
                "xcode.lang.objc.classname",
                "xcode.lang.objc.categoryclause?",
            );
            Type = "xcode.syntax.name.tree";
        };
    },
    {
        Identifier = "xcode.lang.objc.classname";
        Syntax = {
            Tokenizer = "xcode.lang.objc.lexer";
            Rules = (
                "xcode.lang.objc.identifier",
            );
            Type = "xcode.syntax.name.partial";
        };
    },
    {
        Identifier = "xcode.lang.objc.protocolname";
        Syntax = {
            Tokenizer = "xcode.lang.objc.lexer";
            Rules = (
                "xcode.lang.objc.identifier",
            );
            Type = "xcode.syntax.name.partial";
        };
    },
    {
        Identifier = "xcode.lang.objc.protocol.openangle";
        Syntax = {
            Tokenizer = "xcode.lang.objc.lexer";
            Rules = (
                "<",
            );
            Type = "xcode.syntax.name.partial";
        };
    },
    {
        Identifier = "xcode.lang.objc.protocol.closeangle";
        Syntax = {
            Tokenizer = "xcode.lang.objc.lexer";
            Rules = (
                ">",
            );
            Type = "xcode.syntax.name.partial";
        };
    },
    {
        Identifier = "xcode.lang.objc.protocolclause";
        Syntax = {
            Tokenizer = "xcode.lang.objc.lexer";
            Rules = (
                "xcode.lang.objc.protocol.openangle",
                "xcode.lang.objc.protocolname",
                "xcode.lang.objc.protocol.protocollist*",
                "xcode.lang.objc.protocol.closeangle",
            );
        };
    },
    {
        Identifier = "xcode.lang.objc.categoryname";
        Syntax = {
            Tokenizer = "xcode.lang.objc.lexer";
            Rules = (
                "xcode.lang.objc.identifier",
            );
            Type = "xcode.syntax.name.partial";
        };
    },
    {
        Identifier = "xcode.lang.objc.category.openparen";
        Syntax = {
            Tokenizer = "xcode.lang.objc.lexer";
            Rules = (
                "(",
            );
            Type = "xcode.syntax.name.partial";
        };
    },
    {
        Identifier = "xcode.lang.objc.category.closeparen";
        Syntax = {
            Tokenizer = "xcode.lang.objc.lexer";
            Rules = (
                ")",
            );
            Type = "xcode.syntax.name.partial";
        };
    },
    {
        Identifier = "xcode.lang.objc.categoryclause";
        Syntax = {
            Tokenizer = "xcode.lang.objc.lexer";
            Rules = (
                "xcode.lang.objc.category.openparen",
                "xcode.lang.objc.categoryname?",
                "xcode.lang.objc.category.closeparen"
            );
        };
    },


/****************************************************************************/
// MARK: Interfaces/Implementations
/****************************************************************************/

    {
        Identifier = "xcode.lang.objc.protocol.declaration";
        Syntax = {
            Tokenizer = "xcode.lang.objc.lexer.toplevel";
            Rules = (
                "xcode.lang.objc.protocol.declarator",
                "xcode.lang.objc.protocol.protocollist*",
                ";",
            );
            Type = "xcode.syntax.declaration.objc.protocol";
        };
    },
    {
        Identifier = "xcode.lang.objc.protocol.protocollist";
        Syntax = {
            Tokenizer = "xcode.lang.objc.lexer";
            Rules = (
                ",",
                "xcode.lang.objc.protocolname",
            );
        };
    },
    {
        Identifier = "xcode.lang.objc.protocol";
        Syntax = {
            Tokenizer = "xcode.lang.objc.lexer.toplevel";
            Start = "xcode.lang.objc.protocol.declarator";
            End = "@end";
            Foldable = YES;
            IncludeRules = (
                "xcode.lang.objc.function.declaration",
                "xcode.lang.objc.method.declaration",
                "xcode.lang.objc.classmethod.declaration",
                "xcode.lang.objc.property.declaration",
                "xcode.lang.objc.block",
                "xcode.lang.objc.bracketexpr",
                "xcode.lang.objc.parenexpr",
            );
            Type = "xcode.syntax.declaration.objc.protocol";
        };
    },
    {
        Identifier = "xcode.lang.objc.interface";
        Syntax = {
            Tokenizer = "xcode.lang.objc.lexer.toplevel";
            Start = "xcode.lang.objc.interface.declarator";
            End = "@end";
            Foldable = YES;
            IncludeRules = (
                "xcode.lang.objc.function.declaration",
                "xcode.lang.objc.method.declaration",
                "xcode.lang.objc.classmethod.declaration",
                "xcode.lang.objc.property.declaration",
                "xcode.lang.objc.typedef",
                "xcode.lang.objc.block",
                "xcode.lang.objc.bracketexpr",
                "xcode.lang.objc.parenexpr",
            );
            Type = "xcode.syntax.declaration.objc.interface";
        };
    },
    {
        Identifier = "xcode.lang.objc.implementation";
        Syntax = {
            Tokenizer = "xcode.lang.objc.lexer.toplevel";
            Start = "xcode.lang.objc.implementation.declarator";
            End = "@end";
            Foldable = YES;
            IncludeRules = (
                "xcode.lang.objc.function.declaration",
                "xcode.lang.objc.function.definition",
                "xcode.lang.objc.method.definition",
                "xcode.lang.objc.classmethod.definition",
                "xcode.lang.objc.property.implementation.synthesize",
                "xcode.lang.objc.property.implementation.dynamic",
                "xcode.lang.objc.typedef",
                "xcode.lang.objc.block",
                "xcode.lang.objc.closure",
                "xcode.lang.objc.method.block",
                "xcode.lang.objc.classmethod.block",
                "xcode.lang.objc.bracketexpr",
                "xcode.lang.objc.parenexpr",
                "xcode.lang.objc.initializer",
            );
            Type = "xcode.syntax.definition.objc.implementationx";
        };
    },
    
/****************************************************************************/
// MARK: Methods
/****************************************************************************/

    {
        Identifier = "xcode.lang.objc.method.minus";
        Syntax = {
            Tokenizer = "xcode.lang.objc.lexer";
            Rules = ( "-", );
            Type = "xcode.syntax.name.partial";
        };
    },
    {
        Identifier = "xcode.lang.objc.method.colon";
        Syntax = {
            Tokenizer = "xcode.lang.objc.lexer";
            Rules = ( ":", );
            Type = "xcode.syntax.name.partial";
        };
    },
    { // dbx ... this will make trailing semis in the method name
	// match the block color... (this screws up indenting :( )
        Identifier = "xcode.lang.objc.method.semicolon";
        Syntax = {
            Tokenizer = "xcode.lang.objc.lexer";
            Rules = ( ";", );
            Type = "xcode.syntax.method.block";
        };
    },
    {
        Identifier = "xcode.lang.objc.partialname";
        Syntax = {
            Tokenizer = "xcode.lang.objc.lexer";
            Rules = ( "xcode.lang.objc.identifier", );
	    Type = "xcode.syntax.name.partial";
        };
    },


    {
        Identifier = "xcode.lang.objc.method.declaration";
        Syntax = {
            Tokenizer = "xcode.lang.objc.lexer";
            Rules = (
                "xcode.lang.objc.method.declarator",
                "xcode.lang.objc.declaration.attribute*",
                ";",
            );
            Type = "xcode.syntax.declaration.method";
        };
    },
    {
        Identifier = "xcode.lang.objc.declaration.attribute";
        Syntax = {
            Tokenizer = "xcode.lang.objc.lexer";
            Rules = (
                "xcode.lang.objc.identifier",
                "xcode.lang.objc.parenexpr?",
            );
        };
    },
    {
        Identifier = "xcode.lang.objc.method.definition";
        Syntax = {
            Tokenizer = "xcode.lang.objc.lexer.classmethod";
            Rules = (
                "xcode.lang.objc.method.declarator",
		// would like to use this but it screws up
		// tab indenting at the moment
                //"xcode.lang.objc.method.semicolon?",
		//";?",
                "xcode.lang.objc.method.block",
            );
            Type = "xcode.syntax.definition.method";
        };
    },
{// dbx
        Identifier = "xcode.lang.objc.method.declarator";
        Syntax = {
            Tokenizer = "xcode.lang.objc.lexer";
            Rules = (
                "xcode.lang.objc.method.minus",
//                "xcode.lang.objc.parenexpr?",
                "xcode.lang.objc.method.type?",
                "xcode.lang.objc.partialname",
                "xcode.lang.objc.method.declarator.args?",
		";?", // not technically correct to be here since it's
		// a requirement in declarations, but putting it
		// higher up in the right spot is screwing up the
		// block for some reason and we want it to match
		// the rest of the color either of the declarator
		// or the following block
            );
            Type = "xcode.syntax.method.declarator";
        };
    },
{ //dbx ... careful with this one it can make it crash
        Identifier = "xcode.lang.objc.method.declarator.args";
        Syntax = {
            Tokenizer = "xcode.lang.objc.lexer";
            Rules = (
                "xcode.lang.objc.method.colon",
//                "xcode.lang.objc.parenexpr?",
                "xcode.lang.objc.method.paramtype?",
                "xcode.lang.objc.attributes?",
//                "xcode.lang.objc.identifier",
                "xcode.lang.objc.method.declarator.parameter",
                "xcode.lang.objc.method.declarator.moreargs*",
                "xcode.lang.objc.method.declarator.varargs?",
            );
        };
    },
    {
        Identifier = "xcode.lang.objc.attributes";
        Syntax = {
            Tokenizer = "xcode.lang.objc.lexer";
            Rules = (
                "__attribute__|__attribute|__unused",
                "xcode.lang.objc.parenexpr?",
            );
        };
    },
    { //dbox ... careful with this one it can make it crash
        Identifier = "xcode.lang.objc.method.declarator.moreargs";
        Syntax = {
            Tokenizer = "xcode.lang.objc.lexer";
            Rules = (
                "xcode.lang.objc.partialname?",
                "xcode.lang.objc.method.colon",
//                "xcode.lang.objc.parenexpr?",
                "xcode.lang.objc.method.paramtype?",
                "xcode.lang.objc.attributes?",
//                "xcode.lang.objc.identifier",
                "xcode.lang.objc.method.declarator.parameter",
            );
        };
    },
    {
        Identifier = "xcode.lang.objc.method.declarator.varargs";
        Syntax = {
            Tokenizer = "xcode.lang.objc.lexer";
            Rules = (
                ",",
                "...",
            );
        };
	},
	
	
	//////////////////////////////////////////////////////////////
	///// TYPES dbx
	/////////////////////////////////////////////////////////////

    { // dbx
        Identifier = "xcode.lang.objc.method.typeroot";
        Syntax = {
            StartChars = "@abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_";
            Chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_";
	    Words = ( "*", );
	    // all are method parameters
            Type = "xcode.syntax.method.type";
//            AltType = "xcode.syntax.method.type";
        };
    },

    { // dbx
        Identifier = "xcode.lang.objc.method.type";
//        BasedOn = "xcode.lang.c.parenexpr";
        Syntax = {
            Tokenizer = "xcode.lang.objc.lexer.method.type";
            Start = "(";
            End = ")";
	    Type = "xcode.syntax.method.type";
        };
    },
    { // dbx
        Identifier = "xcode.lang.objc.classmethod.type";
//        BasedOn = "xcode.lang.c.parenexpr";
        Syntax = {
            Tokenizer = "xcode.lang.objc.lexer.method.type";
            Start = "(";
            End = ")";
	    Type = "xcode.syntax.classmethod.type";
        };
    },
    { // dbx
        Identifier = "xcode.lang.objc.method.paramtype";
//        BasedOn = "xcode.lang.c.parenexpr";
        Syntax = {
            Tokenizer = "xcode.lang.objc.lexer.method.type";
            Start = "(";
            End = ")";
	    Type = "xcode.syntax.method.paramtype";
        };
    },
    { // dbx
        Identifier = "xcode.lang.objc.classmethod.paramtype";
//        BasedOn = "xcode.lang.c.parenexpr";
        Syntax = {
            Tokenizer = "xcode.lang.objc.lexer.method.type";
            Start = "(";
            End = ")";
	    Type = "xcode.syntax.classmethod.paramtype";
        };
    },

	////////////////////////////////////////////////
	///////////// TYPE LEXER  dbx
	//////////////////////////////////////////////
    {
        Identifier = "xcode.lang.objc.lexer.method.type";
        Syntax = {
            IncludeRules = (
                "xcode.lang.comment.headerdoc",
                "xcode.lang.comment",
                "xcode.lang.comment.singleline",
                "xcode.lang.c.preprocessor",
                "xcode.lang.completionplaceholder",
                "xcode.lang.objc.attribute",
                "xcode.lang.objc.method.typeroot",
            );
         };
     },
     
     ////////////////////////////////////////////////////
     ////////// PARAMETER LEXER dbx
     ////////////////////////////////////////
    
     { //// PARAMETER RULES dbx
        Identifier = "xcode.lang.objc.method.declarator.parameter";
        Syntax = {
            Tokenizer = "xcode.lang.objc.lexer";
            Rules = (
		"xcode.lang.objc.identifier",
            );
            Type = "xcode.syntax.method.parameter";
        };
     },
     { //// PARAMETER RULE dbx
        Identifier = "xcode.lang.objc.classmethod.declarator.parameter";
        Syntax = {
            Tokenizer = "xcode.lang.objc.lexer";
            Rules = (
		"xcode.lang.objc.identifier",
            );
            Type = "xcode.syntax.classmethod.parameter";
        };
     },

    ///////////////////////////////////////////////////////////////
    /////////// METHOD dbx
    ///////////////////////////////////////////////////////////////

    {
        Identifier = "xcode.lang.objc.lexer.method";
        Syntax = {
            IncludeRules = (
                "xcode.lang.comment.degenerate",
                "xcode.lang.comment.headerdoc",
                "xcode.lang.comment.headerdoc.star",
                "xcode.lang.comment.headerdoc.singleline.bang",
                "xcode.lang.comment.headerdoc.singleline.slash",
                "xcode.lang.comment",
                "xcode.lang.comment.singleline",
                "xcode.lang.c.preprocessor",
                "xcode.lang.string.objc",
                "xcode.lang.string",
                "xcode.lang.character",
                "xcode.lang.completionplaceholder",
                "xcode.lang.objc.attribute",
                "xcode.lang.objc.identifier",
                "xcode.lang.objc.array.literal.start",
                "xcode.lang.objc.dictionary.literal.start",
                "xcode.lang.objc.expression.literal.start",
                "xcode.lang.number",
                "xcode.lang.objc.interestingOperators",
            );
        };
    },
    
	
    ///////////////////////////////////////////////////////////////
    /////////// CLASSMETHOD dbx
    ///////////////////////////////////////////////////////////////

    { // dbx
        Identifier = "xcode.lang.objc.lexer.classmethod";
        Syntax = {
            IncludeRules = (
                "xcode.lang.comment.degenerate",
                "xcode.lang.comment.headerdoc",
                "xcode.lang.comment.headerdoc.star",
                "xcode.lang.comment.headerdoc.singleline.bang",
                "xcode.lang.comment.headerdoc.singleline.slash",
                "xcode.lang.comment",
                "xcode.lang.comment.singleline",
                "xcode.lang.c.preprocessor",
                "xcode.lang.string.objc",
                "xcode.lang.string",
                "xcode.lang.character",
                "xcode.lang.completionplaceholder",
                "xcode.lang.objc.attribute",
                "xcode.lang.objc.identifier",
                "xcode.lang.objc.array.literal.start",
                "xcode.lang.objc.dictionary.literal.start",
                "xcode.lang.objc.expression.literal.start",
                "xcode.lang.number",
                "xcode.lang.objc.interestingOperators",
            );
        };
    },

    { // the method name itself is part of the declarator
          Identifier = "xcode.lang.objc.classmethod.name";
      	    Syntax = {
              StartChars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_";
              Chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_";
	      Words = ("*", );
            Type = "xcode.syntax.classmethod.declarator";
            AltType = "xcode.syntax.classmethod.declarator";
	};
    },
    { // dbx
        Identifier = "xcode.lang.objc.classmethod.plus";
        Syntax = {
            Tokenizer = "xcode.lang.objc.lexer.classmethod";
            Rules = ( "+", );
            Type = "xcode.syntax.name.partial";
        };
    },
    { // dbx
        Identifier = "xcode.lang.objc.classmethod.colon";
        Syntax = {
            Tokenizer = "xcode.lang.objc.lexer.classmethod";
            Rules = ( ":", );
            Type = "xcode.syntax.name.partial";
        };
    },
    { // dbx ... this will make trailing semis in the method name
	// match the block color
	// screws up indenting currently so don't use it
        Identifier = "xcode.lang.objc.classmethod.semicolon";
        Syntax = {
            Tokenizer = "xcode.lang.objc.lexer";
            Words = ( ";", );
            Type = "xcode.syntax.classmethod.block";
        };
    },
    { // dbx
        Identifier = "xcode.lang.objc.classmethod.partialname";
        Syntax = {
            Tokenizer = "xcode.lang.objc.lexer.classmethod";
	    // it has to be an identifier here or else Xcode will
	    // refuse to match it, even if you make an identical set
	    // of rules it seems... maybe has to do with Clang.
	    // the only option I have found is by removing the
	    // matching rules associated with identifiers, this will
	    // let the identifiers fall through and be colored by
	    // other rulesets ... no identifiers rules though
	    // seems to prevent clang from coloring class names
            Rules = (
		"xcode.lang.objc.identifier",
		);
	    Type = "xcode.syntax.name.partial";
        };
    },

    { // dbx
        Identifier = "xcode.lang.objc.classmethod.declaration";
        Syntax = {
            Tokenizer = "xcode.lang.objc.lexer.classmethod";
            Rules = (
                "xcode.lang.objc.classmethod.declarator",
                "xcode.lang.objc.classmethod.declaration.attribute*",
                ";",
            );
            Type = "xcode.syntax.declaration.classmethod";
        };
    },
    { //dbx
        Identifier = "xcode.lang.objc.classmethod.declaration.attribute";
        Syntax = {
            Tokenizer = "xcode.lang.objc.lexer.classmethod";
            Rules = (
                "xcode.lang.objc.identifier",
                "xcode.lang.objc.parenexpr?",
            );
        };
    },
    { // dbx
        Identifier = "xcode.lang.objc.classmethod.definition";
        Syntax = {
            Tokenizer = "xcode.lang.objc.lexer.classmethod";
            Rules = (
                "xcode.lang.objc.classmethod.declarator",
		// screwing up indenting, so not using this,
		// it's originally in place to make the semi
		// match the block color
//                "xcode.lang.objc.classmethod.semicolon?",
                "xcode.lang.objc.classmethod.block",
            );
            Type = "xcode.syntax.definition.classmethod";
        };
    },
    { // dbx
        Identifier = "xcode.lang.objc.classmethod.declarator";
        Syntax = {
            Tokenizer = "xcode.lang.objc.lexer.classmethod";
            Rules = (
                "xcode.lang.objc.classmethod.plus",
//                "xcode.lang.objc.parenexpr?",
                "xcode.lang.objc.classmethod.type?", 
                "xcode.lang.objc.classmethod.partialname",
		"xcode.lang.objc.classmethod.declarator.args?",
		";?", // not technically correct to be here since it's
		// a requirement in declarations, but putting it
		// higher up in the right spot is screwing up the
		// block for some reason and we want it to match
		// the rest of the color either of the declarator
		// or the following block
            );
            Type = "xcode.syntax.classmethod.declarator";
        };
    },

    ////////////////////////////////////////////////////////
    /////////// CLASSMETHOD ARGUMENTS dbx
    ////////////////////////////////////////////////////////
   
    { //// FIRSTARG dbx
        Identifier = "xcode.lang.objc.classmethod.declarator.singlearg";
        Syntax = {
            Tokenizer = "xcode.lang.objc.lexer.classmethod";
            Rules = (
		"xcode.lang.objc.classmethod.colon",
		"xcode.lang.objc.classmethod.paramtype?",
		"xcode.lang.objc.classmethod.declarator.parameter",
            );
        };
    },
    { //// ALLARGS dbx
        Identifier = "xcode.lang.objc.classmethod.declarator.args";
        Syntax = {
            Tokenizer = "xcode.lang.objc.lexer.classmethod";
            Rules = (
		"xcode.lang.objc.classmethod.declarator.singlearg",
                "xcode.lang.objc.classmethod.declarator.moreargs*",
                "xcode.lang.objc.classmethod.declarator.varargs?",
            );
        };
    },

    { //// MOREARGS dbx
        Identifier = "xcode.lang.objc.classmethod.declarator.moreargs";
        Syntax = {
            Tokenizer = "xcode.lang.objc.lexer.classmethod";
            Rules = (
                "xcode.lang.objc.classmethod.partialname?",
                "xcode.lang.objc.classmethod.declarator.singlearg",
            );
        };
    },
    { //// VARARGS dbx
        Identifier = "xcode.lang.objc.classmethod.declarator.varargs";
        Syntax = {
            Tokenizer = "xcode.lang.objc.lexer.classmethod";
            Rules = (
                ",",
                "...",
            );
        };
    },
    /////// END METHOD ARG HANDLING	
    
    
/****************************************************************************/
// MARK: Functions
/****************************************************************************/

    {
        Identifier = "xcode.lang.objc.function.definition";
        Syntax = {
            Tokenizer = "xcode.lang.objc.lexer";
            Rules = (
                "xcode.lang.objc.function.declarator",
                "xcode.lang.objc.block",
            );
            Type = "xcode.syntax.definition.c.function";
        };
    },
    {
        Identifier = "xcode.lang.objc.function.declaration";
        Syntax = {
            Tokenizer = "xcode.lang.objc.lexer";
            Rules = (
                "xcode.lang.objc.function.declarator",
                "xcode.lang.objc.declaration.attribute*",
                ";"
            );
            Type = "xcode.syntax.declaration.c.function";
        };
    },
    {
        Identifier = "xcode.lang.objc.function.declarator";
        Syntax = {
            Tokenizer = "xcode.lang.objc.lexer";
            Rules = (
                "xcode.lang.objc.function.name",
                "xcode.lang.objc.parenexpr",
            );
        };
    },
    {
        Identifier = "xcode.lang.objc.function.name";
        Syntax = {
            Tokenizer = "xcode.lang.objc.lexer";
            Rules = (
                "xcode.lang.objc.identifier",
            );
            Type = "xcode.syntax.name.partial";
        };
    },


/****************************************************************************/
// MARK: Properties
/****************************************************************************/

    {
        Identifier = "xcode.lang.objc.property.lexer";
        Syntax = {
            IncludeRules = (
                "xcode.lang.comment.degenerate",
                "xcode.lang.comment.headerdoc",
                "xcode.lang.comment.headerdoc.star",
                "xcode.lang.comment.headerdoc.singleline.bang",
                "xcode.lang.comment.headerdoc.singleline.slash",
                "xcode.lang.comment",
                "xcode.lang.comment.singleline",
                "xcode.lang.c.preprocessor",
                "xcode.lang.string.objc",
                "xcode.lang.string",
                "xcode.lang.character",
                "xcode.lang.completionplaceholder",
                "xcode.lang.objc.property.end",
                "xcode.lang.objc.identifier",
                "xcode.lang.number",
                "xcode.lang.objc.interestingOperators",
            );
        };
    },
    {
        Identifier = "xcode.lang.objc.property.name.lexer";
        Syntax = {
            IncludeRules = (
                "xcode.lang.comment.degenerate",
                "xcode.lang.comment.headerdoc",
                "xcode.lang.comment.headerdoc.star",
                "xcode.lang.comment.headerdoc.singleline.bang",
                "xcode.lang.comment.headerdoc.singleline.slash",
                "xcode.lang.comment",
                "xcode.lang.comment.singleline",
                "xcode.lang.c.preprocessor",
                "xcode.lang.string.objc",
                "xcode.lang.string",
                "xcode.lang.character",
                "xcode.lang.completionplaceholder",
                "xcode.lang.objc.property.name",
                "xcode.lang.objc.identifier",
                "xcode.lang.number",
                "xcode.lang.objc.interestingOperators",
            );
        };
    },
    {
        Identifier = "xcode.lang.objc.property.comma";
        Syntax = {
            Tokenizer = "xcode.lang.objc.lexer";
            Rules = ( ",", );
            Type = "xcode.syntax.name.partial";
        };
    },
    {
        Identifier = "xcode.lang.objc.property.declaration";
        Syntax = {
            Tokenizer = "xcode.lang.objc.property.lexer";
            Start = "xcode.lang.objc.property.declarator";
            End = "xcode.lang.objc.property.end";
            AltEnd = ";";
            Type = "xcode.syntax.declaration.property";
        };
    },
    {
        Identifier = "xcode.lang.objc.property.declarator";
        Syntax = {
            Tokenizer = "xcode.lang.objc.lexer";
            Rules = (
                "@property",
                "xcode.lang.objc.property.options?",
            );
        };
    },
    {
        Identifier = "xcode.lang.objc.property.end";
        Syntax = {
            Tokenizer = "xcode.lang.objc.property.name.lexer";
            Rules = (
                "xcode.lang.objc.property.name",
                "xcode.lang.objc.property.morenames?",
                ";",
            );
            Type = "xcode.syntax.name.tree";
        };
    },
    {
        Identifier = "xcode.lang.objc.property.name";
        Syntax = {
            Tokenizer = "xcode.lang.objc.lexer";
            Rules = (
                "xcode.lang.objc.property.name.actual",
                "xcode.lang.objc.property.name.ivarextra?",
            );
        };
    },
    {
        Identifier = "xcode.lang.objc.property.morenames";
        Syntax = {
            Tokenizer = "xcode.lang.objc.lexer";
            Rules = (
                "xcode.lang.objc.property.namelist+",
            );
        };
    },
    {
        Identifier = "xcode.lang.objc.property.namelist";
        Syntax = {
            Tokenizer = "xcode.lang.objc.property.name.lexer";
            Rules = (
                "xcode.lang.objc.property.comma",
                "xcode.lang.objc.property.name",
            );
        };
    },
    {
        Identifier = "xcode.lang.objc.property.name.actual";
        Syntax = {
            Tokenizer = "xcode.lang.objc.lexer";
            Rules = (
                "xcode.lang.objc.identifier",
            );
            Type = "xcode.syntax.name.partial";
        };
    },
    {
        Identifier = "xcode.lang.objc.property.name.ivarextra";
        Syntax = {
            Tokenizer = "xcode.lang.objc.lexer";
            Start = "=";
            End = "xcode.lang.objc.identifier";
        };
    },
    {
        Identifier = "xcode.lang.objc.property.options";
        Syntax = {
            Tokenizer = "xcode.lang.objc.property.options.lexer";
            Start = "(";
            End = ")";
            AltEnd = ";";
            Recursive = YES;
        };
    },
    {
        Identifier = "xcode.lang.objc.property.options.lexer";
        Syntax = {
            IncludeRules = (
                "xcode.lang.comment.degenerate",
                "xcode.lang.comment.headerdoc",
                "xcode.lang.comment.headerdoc.star",
                "xcode.lang.comment.headerdoc.singleline.bang",
                "xcode.lang.comment.headerdoc.singleline.slash",
                "xcode.lang.comment",
                "xcode.lang.comment.singleline",
                "xcode.lang.c.preprocessor",
                "xcode.lang.string.objc",
                "xcode.lang.string",
                "xcode.lang.character",
                "xcode.lang.completionplaceholder",
                "xcode.lang.objc.property.options.identifier",
                "xcode.lang.objc.identifier",
                "xcode.lang.number",
                "xcode.lang.objc.interestingOperators",
            );
        };
    },
    {
        Identifier = "xcode.lang.objc.property.options.identifier";
        Syntax = {
            StartChars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_";
            Chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_";
            Words = (
                "atomic",
                "setter",
                "getter",
                "readonly",
                "readwrite",
                "assign",
                "retain",
                "copy",
                "nonatomic",
                "weak",
                "strong",
                "unsafe_unretained",
             );
            Type = "xcode.syntax.keyword";
            AltType = "xcode.syntax.identifier";    // non-keywords are identifiers
        };
    },
    {
        Identifier = "xcode.lang.objc.property.implementation.synthesize";
        Syntax = {
            Tokenizer = "xcode.lang.objc.property.lexer";
            Start = "@synthesize";
            End = "xcode.lang.objc.property.end";
            AltEnd = ";";
            Type = "xcode.syntax.declaration.property";
        };
    },
    {
        Identifier = "xcode.lang.objc.property.implementation.dynamic";
        Syntax = {
            Tokenizer = "xcode.lang.objc.property.lexer";
            Start = "@dynamic";
            End = "xcode.lang.objc.property.end";
            AltEnd = ";";
            Type = "xcode.syntax.declaration.property";
        };
    },
    
/****************************************************************************/
// MARK: Typedefs
/****************************************************************************/

    {
        Identifier = "xcode.lang.objc.lexer.typedef";
        Syntax = {
            IncludeRules = (
                "xcode.lang.comment.degenerate",
                "xcode.lang.comment.headerdoc",
                "xcode.lang.comment.headerdoc.star",
                "xcode.lang.comment.headerdoc.singleline.bang",
                "xcode.lang.comment.headerdoc.singleline.slash",
                "xcode.lang.comment",
                "xcode.lang.comment.singleline",
                "xcode.lang.c.preprocessor",
                "xcode.lang.string",
                "xcode.lang.character",
                "xcode.lang.completionplaceholder",
                "xcode.lang.objc.attribute",
                "xcode.lang.objc.typedef.end",
                "xcode.lang.objc.identifier",
                "xcode.lang.number",
                "xcode.lang.objc.interestingOperators",
            );
        };
    },
    {
        Identifier = "xcode.lang.objc.lexer.typedef.name";
        Syntax = {
            IncludeRules = (
                "xcode.lang.comment.degenerate",
                "xcode.lang.comment.headerdoc",
                "xcode.lang.comment.headerdoc.star",
                "xcode.lang.comment.headerdoc.singleline.bang",
                "xcode.lang.comment.headerdoc.singleline.slash",
                "xcode.lang.comment",
                "xcode.lang.comment.singleline",
                "xcode.lang.c.preprocessor",
                "xcode.lang.string",
                "xcode.lang.character",
                "xcode.lang.completionplaceholder",
                "xcode.lang.objc.attribute",
                "xcode.lang.objc.typedef.name",
                "xcode.lang.objc.identifier",
                "xcode.lang.number",
                "xcode.lang.objc.interestingOperators",
            );
        };
    },
    {
        Identifier = "xcode.lang.objc.typedef";
        Syntax = {
            Tokenizer = "xcode.lang.objc.lexer.typedef";
            Start = "typedef";
            End = "xcode.lang.objc.typedef.end";
            AltEnd = ";";
            IncludeRules = (
                "xcode.lang.objc.enumblock",
                "xcode.lang.objc.structblock",
                "xcode.lang.objc.unionblock",
                "xcode.lang.objc.typedef.function",
                "xcode.lang.objc.block",
                "xcode.lang.objc.bracketexpr",
                "xcode.lang.objc.parenexpr",
            );
            Type = "xcode.syntax.typedef";
        };
    },
    {
        Identifier = "xcode.lang.objc.typedef.name";
        Syntax = {
            Tokenizer = "xcode.lang.objc.lexer";
            Rules = (
                "xcode.lang.objc.identifier",
            );
            Type = "xcode.syntax.name.partial";
        };
    },
    {
        Identifier = "xcode.lang.objc.typedef.end";
        Syntax = {
            Tokenizer = "xcode.lang.objc.lexer.typedef.name";
            Rules = (
                "xcode.lang.objc.typedef.name",
                ";?"
            );
            Type = "xcode.syntax.name.tree";
        };
    },
    {
        Identifier = "xcode.lang.objc.typedef.function";
        Syntax = {
            Tokenizer = "xcode.lang.objc.lexer.typedef.name";
            Rules = (
                "(",
                "*",
                "xcode.lang.objc.typedef.name",
                ")",
            );
            Type = "xcode.syntax.name.tree";
        };
    },


/****************************************************************************/
// MARK: Blocks
/****************************************************************************/
	
    // added closures (block blocks) and different context
    // for classmethod and instancemethod blocks ... dbx
    {
        Identifier = "xcode.lang.objc.block";
        BasedOn = "xcode.lang.c.block";     // for text macros
        Syntax = {
            Tokenizer = "xcode.lang.objc.lexer";
            Start = "{";
            End = "}";
            Foldable = YES;
            Recursive = YES;
	    Type = "xcode.syntax.block"; 
            IncludeRules = (
                "xcode.lang.objc.array.literal",
                "xcode.lang.objc.dictionary.literal",
                "xcode.lang.objc.expression.literal",
                "xcode.lang.objc.closure",
                "xcode.lang.objc.bracketexpr",
                "xcode.lang.objc.parenexpr",
            );
        };
    },
    { // dbx
        Identifier = "xcode.lang.objc.method.block";
        BasedOn = "xcode.lang.c.block";     // for text macros
        Syntax = {
            Tokenizer = "xcode.lang.objc.lexer";
            Start = "{";
            End = "}";
            Foldable = YES;
            Recursive = YES;
	    Type = "xcode.syntax.method.block"; 
            IncludeRules = (
                "xcode.lang.objc.array.literal",
                "xcode.lang.objc.dictionary.literal",
                "xcode.lang.objc.expression.literal",
                "xcode.lang.objc.closure",
                "xcode.lang.objc.bracketexpr",
                "xcode.lang.objc.parenexpr",
            );
        };
    },
    { // dbx
        Identifier = "xcode.lang.objc.classmethod.block";
        BasedOn = "xcode.lang.c.block";     // for text macros
        Syntax = {
            Tokenizer = "xcode.lang.objc.lexer";
            Start = "{";
            End = "}";
            Foldable = YES;
            Recursive = YES;
	    Type = "xcode.syntax.classmethod.block"; 
            IncludeRules = (
                "xcode.lang.objc.array.literal",
                "xcode.lang.objc.dictionary.literal",
                "xcode.lang.objc.expression.literal",
                "xcode.lang.objc.closure",
                "xcode.lang.objc.bracketexpr",
                "xcode.lang.objc.parenexpr",
	    );
        };
    },
    { // dbx
        Identifier = "xcode.lang.objc.closure";
        Syntax = {
            Tokenizer = "xcode.lang.objc.lexer";
            Recursive = YES;
            Rules = (
		"^",
		"xcode.lang.objc.method.type?",
                "xcode.lang.objc.block",
            );
            Type = "xcode.syntax.closure";
        };
    },
    { // dbx
        Identifier = "xcode.lang.objc.typeblock";
        BasedOn = "xcode.lang.c.block";     // for text macros
        Syntax = {
            Tokenizer = "xcode.lang.objc.lexer";
            Start = "{";
            End = "}";
            Foldable = YES;
            Recursive = YES;
            IncludeRules = (
                "xcode.lang.objc.array.literal",
                "xcode.lang.objc.dictionary.literal",
                "xcode.lang.objc.expression.literal",
                "xcode.lang.objc.bracketexpr",
                "xcode.lang.objc.parenexpr",
                "xcode.lang.objc.structblock",
                "xcode.lang.objc.unionblock",
            );
        };
    },
    {
        Identifier = "xcode.lang.objc.enumblock";
        Syntax = {
            Tokenizer = "xcode.lang.objc.lexer";
            Rules = (
                "xcode.lang.objc.enum.declarator|xcode.lang.objc.nsenum.declarator",
                "xcode.lang.objc.block",
            );
            Type = "xcode.syntax.declaration.enum";
        };
    },
    {
        Identifier = "xcode.lang.objc.enum.declarator";
        Syntax = {
            Tokenizer = "xcode.lang.objc.lexer";
            Rules = (
                "enum",
                "xcode.lang.objc.identifier?",
                ":?",
                "xcode.lang.objc.typeidentifier*",
            );
        };
    },
    {
        Identifier = "xcode.lang.objc.nsenum.declarator";
        Syntax = {
            Tokenizer = "xcode.lang.objc.lexer";
            Rules = (
                "NS_ENUM",
                "xcode.lang.objc.parenexpr",
            );
        };
    },
    {
        Identifier = "xcode.lang.objc.structblock";
        Syntax = {
            Tokenizer = "xcode.lang.objc.lexer";
            Rules = (
                "struct",
                "xcode.lang.objc.identifier?",
                ":?",
                "xcode.lang.objc.typeidentifier*",
                "xcode.lang.objc.typeblock",
            );
            Type = "xcode.syntax.declaration.struct";
        };
    },
    {
        Identifier = "xcode.lang.objc.unionblock";
        Syntax = {
            Tokenizer = "xcode.lang.objc.lexer";
            Rules = (
                "union",
                "xcode.lang.objc.identifier?",
                ":?",
                "xcode.lang.objc.typeidentifier*",
                "xcode.lang.objc.typeblock",
            );
            Type = "xcode.syntax.declaration.union";
        };
    },
    {
        Identifier = "xcode.lang.objc.typeidentifier";
        Syntax = {
            Tokenizer = "xcode.lang.objc.lexer";
            Rules = (
                "xcode.lang.objc.identifier|int|char|float|double|short|long|unsigned|signed",
            );
        };
    },
    
    {
        Identifier = "xcode.lang.objc.parenexpr";
        BasedOn = "xcode.lang.c.parenexpr";
        Syntax = {
            Tokenizer = "xcode.lang.objc.lexer";
            Start = "(";
            End = ")";
            Recursive = YES;
            IncludeRules = (
                "xcode.lang.objc.array.literal",
                "xcode.lang.objc.dictionary.literal",
                "xcode.lang.objc.expression.literal",
                "xcode.lang.objc.bracketexpr",
                "xcode.lang.objc.block",
                "xcode.lang.objc.closure",
            );
        };
    },
    
    {
        Identifier = "xcode.lang.objc.rbracket";
        Syntax = {
            Tokenizer = "xcode.lang.objc.lexer";
	    Rules = ( "]" , );
	    Type = "xcode.syntax.brackets";
        };
    },
    {
        Identifier = "xcode.lang.objc.lbracket";
        Syntax = {
            Tokenizer = "xcode.lang.objc.lexer";
	    Rules = ( "[" , );
	    Type = "xcode.syntax.brackets";
        };
    },
    {
        Identifier = "xcode.lang.objc.bracketexpr";
        BasedOn = "xcode.lang.c.bracketexpr";
        Syntax = {
            Tokenizer = "xcode.lang.objc.lexer";
//            Start = "[";
//            End = "]";
            Start = "xcode.lang.objc.lbracket";
            End = "xcode.lang.objc.rbracket";
            Recursive = YES;
            IncludeRules = (
                "xcode.lang.objc.array.literal",
                "xcode.lang.objc.dictionary.literal",
                "xcode.lang.objc.expression.literal",
                "xcode.lang.objc.parenexpr",
                "xcode.lang.objc.block",
                "xcode.lang.objc.closure",
            );
//	    Type = "xcode.syntax.brackets"; // OK?
        };
    },
    {
        Identifier = "xcode.lang.objc.initializer";
        Syntax = {
            Tokenizer = "xcode.lang.objc.lexer.toplevel";
            Start = "=";
            End = ";";
            Recursive = NO;
            IncludeRules = (
                "xcode.lang.objc.closure",
                "xcode.lang.objc.block",
                "xcode.lang.objc.array.literal",
                "xcode.lang.objc.dictionary.literal",
                "xcode.lang.objc.expression.literal",
                "xcode.lang.objc.parenexpr",
                "xcode.lang.objc.bracketexpr",
            );
        };
    },
    
    {
        Identifier = "xcode.lang.objc.array.literal";
        Syntax = {
            Tokenizer = "xcode.lang.objc.literal.lexer";
            Start = "@[";
            End = "xcode.lang.objc.array.literal.end";
            Recursive = YES;
            IncludeRules = (
                "xcode.lang.objc.dictionary.literal",
                "xcode.lang.objc.expression.literal",
                "xcode.lang.objc.bracketexpr",
                "xcode.lang.objc.parenexpr",
                "xcode.lang.objc.closure",
                "xcode.lang.objc.block",
            );
        };
    },
    {
        Identifier = "xcode.lang.objc.array.literal.start";
        Syntax = {
            Words = ("@[",);
            Type = "xcode.syntax.number";
        };
    },
    {
        Identifier = "xcode.lang.objc.array.literal.end";
        Syntax = {
            Tokenizer = "xcode.lang.objc.lexer";
            Rules = ("]",);
            Type = "xcode.syntax.number";
        };
    },
    
    {
        Identifier = "xcode.lang.objc.dictionary.literal";
        Syntax = {
            Tokenizer = "xcode.lang.objc.literal.lexer";
            Start = "@{";
            End = "xcode.lang.objc.dictionary.literal.end";
            Recursive = YES;
            IncludeRules = (
                "xcode.lang.objc.array.literal",
                "xcode.lang.objc.expression.literal",
                "xcode.lang.objc.bracketexpr",
                "xcode.lang.objc.parenexpr",
                "xcode.lang.objc.block",
                "xcode.lang.objc.closure",
            );
        };
    },
    {
        Identifier = "xcode.lang.objc.dictionary.literal.start";
        Syntax = {
            Words = ("@{",);
            Type = "xcode.syntax.number";
        };
    },
    {
        Identifier = "xcode.lang.objc.dictionary.literal.end";
        Syntax = {
            Tokenizer = "xcode.lang.objc.lexer";
            Rules = ("}",);
            Type = "xcode.syntax.number";
        };
    },
    
    {
        Identifier = "xcode.lang.objc.expression.literal";
        Syntax = {
            Tokenizer = "xcode.lang.objc.literal.lexer";
            Start = "@(";
            End = "xcode.lang.objc.expression.literal.end";
            Recursive = YES;
            IncludeRules = (
                "xcode.lang.objc.array.literal",
                "xcode.lang.objc.dictionary.literal",
                "xcode.lang.objc.bracketexpr",
                "xcode.lang.objc.parenexpr",
                "xcode.lang.objc.block",
                "xcode.lang.objc.closure",
            );
        };
    },
    {
        Identifier = "xcode.lang.objc.expression.literal.start";
        Syntax = {
            Words = ("@(",);
            Type = "xcode.syntax.number";
        };
    },
    {
        Identifier = "xcode.lang.objc.expression.literal.end";
        Syntax = {
            Tokenizer = "xcode.lang.objc.lexer";
            Rules = (")",);
            Type = "xcode.syntax.number";
        };
    },

)

